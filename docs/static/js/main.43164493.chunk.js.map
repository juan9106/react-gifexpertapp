{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","process","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","image","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACVC,mBAAS,IADC,mBACvCC,EADuC,KAC3BC,EAD2B,KAa9C,OACI,sBAAMC,SAPW,SAACC,GAClBA,EAAEC,kBACGJ,EAAWK,OAAOC,OAAS,GAChCR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,QAIrC,SACI,uBAAOC,KAAK,OAAOC,MAAOT,EAAYU,SAZvB,SAACP,GACpBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,6BAC2EI,oCAD3E,SAEAC,MAAMH,GAFN,cAEbI,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXX,IAAKS,EAAIG,OAAOC,iBAAiBb,QATtB,kBAcZO,GAdY,4CAAH,sDCEPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOX,EAAU,EAAVA,IACjC,OACI,sBAAKe,UAAU,OAAf,UACI,4BAAIJ,IACJ,qBAAKK,IAAKhB,EAAKiB,IAAKN,QCDnBO,EAAU,SAAC,GAAkB,IAAhBpB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAiBtC,OAXAC,qBAAU,WACNzB,EAAQC,GAAUyB,MAAK,SAAAC,GACnBC,YAAW,WACPJ,EAAS,CACLf,KAAMkB,EACNL,SAAS,MAEd,UAER,CAACrB,IAEGsB,EDd2BM,CAAa5B,GAAvCqB,EAD6B,EAC7BA,QAAeP,EADc,EACpBN,KAGjB,OACI,qCACI,6BAAKR,IACHqB,GAAW,mBAAGJ,UAAU,mCAAb,qBACb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAI,SAACmB,GAAD,OAAY,cAAC,EAAD,eAAgCA,GAAdA,EAAMjB,aEXtDkB,EAAe,WAAO,IAAD,EACM5C,mBAAS,IADf,mBACvB6C,EADuB,KACX9C,EADW,KAG9B,OACI,gCACI,+CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEI8C,EAAWrB,KAAI,SAAAV,GAAQ,OAAK,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,U,MCR1DgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.43164493.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const handleOnChange = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        if (!inputValue.trim().length > 0) return;\r\n        setCategories(cat => [inputValue, ...cat]);\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" value={inputValue} onChange={handleOnChange} />\r\n        </form>\r\n    );\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${process.env.REACT_APP_NOT_SECRET_KEY}`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    //console.log(gifs);\r\n    return gifs;\r\n}","import React from 'react';\r\n\r\nexport const GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className=\"card\">\r\n            <p>{title}</p>\r\n            <img src={url} alt={title} />\r\n        </div>\r\n    );\r\n}","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n    const { loading, data: images } = useFetchGifs(category);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map((image) => (<GifGridItem key={image.id} {...image} />))\r\n                }\r\n            </div>\r\n        </>\r\n    );\r\n};","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs => {\r\n            setTimeout(() => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                });\r\n            }, 3000);\r\n        });\r\n    }, [category]);\r\n\r\n    return state;\r\n};","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <div>\r\n            <h2>GifExpertoApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n            {\r\n                categories.map(category => (<GifGrid key={category} category={category} />))\r\n            }\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}